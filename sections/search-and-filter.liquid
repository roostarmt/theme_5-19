{% comment %}Begin custom code{% endcomment %}
	{% comment %}ly_global_begin{% endcomment %}{% render 'ly-global' %}{% comment %}ly_global_end{% endcomment %}
{% comment %}End custom code{% endcomment %}
<div class="page-title">
{% comment %}Begin custom code{% endcomment %}
  {% if section.settings.title != blank %}
  	<h1>{{ section.settings.title | strip }}</h1>
  {% endif %}
  
  {%- if section.settings.breadcrumbs -%}
  	{% render 'breadcrumbs' %}
  {%- endif -%}
{% comment %}End custom code{% endcomment %}
</div>
<div class="main-container container"> 
  <div class="page-container">
    {% comment %}
      Regular page content goes here.
    {% endcomment %}
    <div class="rte">
{% comment %}Begin custom code{% endcomment %}
      {% comment %}ly_code_replace_for_[ page.content ]_begin{% endcomment %}{% render 'ly-content' with page %}{{ ly_translation }}{% comment %}ly_code_replace_end{% endcomment %}
{% comment %}End custom code{% endcomment %}
    </div>
    <div class="row">
      <div class="form-group" id="dropdown-area">
      </div>
    </div>

    <div class="row text-center">
      <button id="filterTarget" class="btn btn-primary" data-redirect="" disabled>
        SEARCH PRODUCT
      </button>
    </div>
  </div>
</div>

<style>
  .filter-layer{
  	margin: 0 0 25px 0;
  }
  select.form-control.hidden{
  	display: none;
  }
  
{% comment %}Begin custom code{% endcomment %}
  @media only screen and (min-width: 769px) {
    .main-content {
      min-height: 300px;
    }
  }
{% comment %}End custom code{% endcomment %}
</style>

{% comment %}Begin custom code{% endcomment %}
{%- liquid
    if section.settings.content_url != blank
    	assign content_url = section.settings.content_url
    else
		assign content_url = 'https://support.scsunlimited.com/hc/en-us/articles/200390835'
    endif
    
    if section.settings.search_filter_product != blank
    	assign product = section.settings.search_filter_product
    else
    	assign product = all_products['search-filter-app']
    endif
-%}
{% comment %}End custom code{% endcomment %}

<script>
  //global variables for dropdown creation
  const COLLECTION_URL = '{{ shop.url }}' + '/collections/';
{% comment %}Begin custom code{% endcomment %}
  const CONTACT_URL = '{{ content_url | strip }}';
  let jsonString = '[' + '{{ product.description | strip_html }}' + ']';
{% comment %}End custom code{% endcomment %}
  let jsonData = JSON.parse(jsonString);
  let checkHeaders = [];
  let headers = [];
  let threshold = Object.keys(jsonData[0]).length - 1;
  
  for (let i = 0; i < Object.keys(jsonData[0]).length; i++){
    let currentKey = Object.keys(jsonData[0])[i];
    checkHeaders.push('');
    headers.push(currentKey);
    
    let newDiv = document.createElement("div");
    let className = (i == threshold) ? "filter-layer-wrapper col-md-3 col-sm-12 hidden" : "filter-layer-wrapper col-md-3 col-sm-12";
    newDiv.className = className;
    
    let label = document.createElement("label");
    label.appendChild(document.createTextNode(currentKey));
    label.className = 'filter-layer__label';
	newDiv.append(label);    
    
    let selectList = document.createElement("select");
    let targetIndedx = i + 1;
    className = (i == threshold) ? "filter-layer form-control form-control--last" : "filter-layer form-control";
    selectList.className = className;
    selectList.setAttribute('data-filter-index' , i);
    selectList.setAttribute('data-filter-target', targetIndedx);
    newDiv.append(selectList);
    
    $('#dropdown-area').append(newDiv);
  }
  
  $('select.filter-layer').each(function(index) {
    //first adds basic 'Select Header' option
    $(this).html(function() {
      let u   = jsonData.slice(),
          ret = '<option class="dropdown-item" value="-1" selected>Select '+ headers[index] +'</option>',
          arr = [];

      //then checks the values in the json object for that header and pushes them to an array if unique
      //also creates html option element for that value if unique
      (function get() {
        if (u.length) {
          let v = u.shift();
          if ( $.inArray(v[headers[index]], arr) == -1) {
            arr.push(v[headers[index]]);
            ret += '<option class="dropdown-item" value="' + v[headers[index]] + '">' + v[headers[index]] + '</option>';
          }
          get();
        }
      }());

      return ret;
    });
    
    checkDisabled();

    //when an item from a dropdown is selected, the html for the next dropdown is generated
    $(this).change(function() {
      let target = $(this).attr('data-filter-target');
      
      
        //checks to see which dropdowns shouldn't be available yet
        checkDisabled();
        let parentValue = $(this).val();
        checkHeaders[index] = parentValue;

        $('select.filter-layer[data-filter-index="' + target +'"]').html(function() {
          let u   = jsonData.slice(),
              ret = '<option class="dropdown-item" value="-1" selected>Select '+ headers[index + 1] +'</option>',
              arr = [];

          (function get() {
            if (u.length) {
              let v = u.shift();
              //checks to see if the value from the previous dropdown is the same as the value in this object
              //this simulates the 'nested' json structure
              let bool = true;

              for (let i = 0; i < checkHeaders.length; i++) {
                if (checkHeaders[i] !== v[headers[i]] && checkHeaders[i] !== '') {
                  bool = false; 
                }
              }

              if ( $.inArray(v[headers[index + 1]], arr) == -1  && bool) {
                arr.push(v[headers[index + 1]]);
                ret += '<option class="dropdown-item" value="' + v[headers[index + 1]] + '">' + v[headers[index + 1]] + '</option>';
              }
              get();
            }
          }());
          
          //if last value, send to the value's collection page
          if (target == threshold) {
            let product = ret.split('<option class="dropdown-item" value="-1" selected>Select Platform</option>').pop().replace(/(<([^>]+)>)/ig,"");
            product = product.trim();
            product = product.replace(/\s/g, '-');
            product = product.toLowerCase();
            let url = '';
            if (product.indexOf('contact') !== -1){
              url = CONTACT_URL;
            }
            {%comment%}
            else if (product == 'rev'){
              url = COLLECTION_URL + 'ski-doo-rev-sled-wraps';
            }
             {% endcomment %}
            else{
              url = COLLECTION_URL + product;
            }
            updateTargetURL(url);
          }

          return ret;
        });
    });
  });
  
  //function for copying text from the input bar
  $('#copyJsonBtn').on('click', function() {
    var copyText = $('#jsonOutput');
    copyText.select();
    //copies to clipboard
    document.execCommand("copy");
  });
  
  //iterates over the amount of 'select' HTML elements on the page (dropdowns) 
  //to check if the dropdown next to it should be disabled
  function checkDisabled() {
    $('select.filter-layer').each(function(index) {
      //data-filter-index
      let target = $(this).attr('data-filter-target'),
          nextLayer = $('select.filter-layer[data-filter-index="' + target +'"]');
      
      if ($(this).val() == "-1") {
        nextLayer.prop('disabled', true);
        nextLayer.html('<option class="dropdown-item" value="-1" selected>Select '+ headers[index + 1] +'</option>');
        checkHeaders[index] = '';
        disableCTAButton();
      } 
      else if ($(this).val() !== checkHeaders[index] && checkHeaders[index] !== '') {
        checkHeaders[index] = '';
        nextLayer.html('<option class="dropdown-item" value="-1" selected>Select '+ headers[index + 1] +'</option>');
        nextLayer.prop('disabled', false);
      } 
      else {
        nextLayer.prop('disabled', false);
      }	
  	});
  }
  
  function updateTargetURL(url){
  	$('#filterTarget').attr('data-redirect', url);
    $('#filterTarget').prop('disabled', false);
  }
  function disableCTAButton(){
  	$('#filterTarget').prop('disabled', true);
  }
  $('#filterTarget').click(function(){
    let targetURL = $(this).attr('data-redirect');
  	window.location.href = targetURL;
  });

</script>

  	<link href="//fonts.googleapis.com/css?family=Roboto Condensed:100italic,300italic,400italic,600italic,700italic,800italic,900italic,100,300,600,700,800,900,400&amp;subset=cyrillic-ext,greek-ext,latin,latin-ext,cyrillic,greek,vietnamese" rel="stylesheet" type="text/css">
        {{ 'bootstrap.min.js' | asset_url | script_tag  }} 
        {{ 'bootstrap.min.css' | asset_url | stylesheet_tag  }} 
        {{ 'color-config.css' | asset_url | stylesheet_tag  }} 

{% comment %}Begin custom code{% endcomment %}
{% schema %}
  {
    "name": "Search & Filter",
	"limit": 1,
    "settings": [
      {
        "type": "text",
        "id": "title",
        "label": "Title",
		"default": "Ski-Doo Search / Filter"
      },
      {
        "type": "checkbox",
        "id": "breadcrumbs",
        "label": "Show section breadcrumbs"
      },
      {
        "type": "url",
        "id": "content_url",
        "label": "Content URL"
      },
      {
        "type": "product",
        "id": "search_filter_product",
        "label": "Product"
      }
	],
    "presets": [
      {
        "name": "Search & Filter",
        "category": "ADVANCED LAYOUT"
      }
    ]
  }
{% endschema %}
{% comment %}End custom code{% endcomment %}
