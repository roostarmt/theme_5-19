<script>
  document.addEventListener('DOMContentLoaded', function () {
    // This script will be initialized from vectary-embed.liquid
    window.initSelectedOptionsDisplay = function (products, colorSwatchesData, appState) {
      // Populate selected levels
      const selectedLevelsContainer = document.getElementById('selected-levels-container');
      if (selectedLevelsContainer) {
        selectedLevelsContainer.innerHTML = '';

        // Add all products to the display
        products.forEach((product) => {
          const levelItem = document.createElement('div');
          levelItem.className = 'level-item active'; // Default to active
          levelItem.setAttribute('data-level', product.level);

          const levelName = document.createElement('span');
          levelName.textContent = product.name;

          const removeButton = document.createElement('button');
          removeButton.className = 'remove-button';
          removeButton.setAttribute('data-level', product.level);
          removeButton.setAttribute('aria-label', `Remove ${product.name}`);
          removeButton.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <circle cx="12" cy="12" r="10"></circle>
              <line x1="15" y1="9" x2="9" y2="15"></line>
              <line x1="9" y1="9" x2="15" y2="15"></line>
            </svg>
          `;

          // Add click handler for remove button
          removeButton.addEventListener('click', function () {
            const level = this.getAttribute('data-level');
            const levelEvent = new CustomEvent('selected-options-remove-level', {
              detail: { level: parseInt(level) },
            });
            document.dispatchEvent(levelEvent);

            // Toggle visibility instead of hiding
            if (levelItem.classList.contains('inactive')) {
              levelItem.classList.remove('inactive');
              levelItem.classList.add('active');
              this.textContent = 'Remove';
            } else {
              levelItem.classList.remove('active');
              levelItem.classList.add('inactive');
              this.textContent = 'Reactivate';
            }
          });

          levelItem.appendChild(levelName);
          levelItem.appendChild(removeButton);
          selectedLevelsContainer.appendChild(levelItem);
        });
      }
    };
  });
</script>

<style>
  .level-item.inactive {
    opacity: 0.5;
    pointer-events: none; /* Optional: Disable interaction */
  }

  .level-item.active {
    opacity: 1;
    pointer-events: auto;
  }
</style>