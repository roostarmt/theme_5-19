{% comment %}
  Dynamic Selected Options Display
  This component displays selected options and integrates with the vectary-embed state management.
  
  Parameters:
  - products: Array of product data with level, name, price
  - state: Object containing color values and other state
{% endcomment %}

<div class="selected-options-container">
  <!-- Header with cart icon -->
  <div class="selected-options-header">
    <svg class="cart-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <circle cx="9" cy="21" r="1"></circle>
      <circle cx="20" cy="21" r="1"></circle>
      <path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"></path>
    </svg>
    <h2>Selected Options</h2>
  </div>

  <!-- Selected levels with remove buttons -->
  <div id="selected-levels-container" class="selected-levels">
    <!-- Level items will be populated here by JavaScript -->
  </div>
  
  <!-- Divider -->
  <div class="options-divider"></div>
  
  <!-- Selected color swatches with palette icon -->
  <div class="selected-colors-header">
    <svg class="palette-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <circle cx="13.5" cy="6.5" r="2.5"></circle>
      <circle cx="19" cy="13" r="2.5"></circle>
      <circle cx="6" cy="12.5" r="2.5"></circle>
      <circle cx="10" cy="19" r="2.5"></circle>
      <line x1="13.5" y1="9" x2="13.5" y2="14.5"></line>
      <line x1="16.5" y1="13" x2="9" y2="13"></line>
      <line x1="8.5" y1="12.5" x2="11" y2="16.5"></line>
      <line x1="12" y1="19" x2="16.5" y2="15.5"></line>
    </svg>
    <h3>Selected Colors</h3>
  </div>
  
  <!-- Color swatches grid -->
  <div id="selected-colors-grid" class="selected-colors-grid">
    <!-- Color items will be populated here by JavaScript -->
  </div>
  
  <!-- Checkout button -->
  <div class="checkout-button-container">
    <button id="selected-options-checkout-button" class="checkout-button">
      <svg class="checkout-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <circle cx="9" cy="21" r="1"></circle>
        <circle cx="20" cy="21" r="1"></circle>
        <path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"></path>
      </svg>
      Checkout
    </button>
    <p class="color-selection-notice">Your color selections will be saved with your order</p>
  </div>
</div>

<style>
  .selected-options-container {
    width: 100%;
    max-width: 100%;
    margin: 0 auto;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    padding: 20px;
    background-color: #fff;
    box-shadow: 0 1px 3px rgba(0,0,0,0.08);
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
  }
  
  .selected-options-header {
    display: flex;
    align-items: center;
    margin-bottom: 20px;
  }
  
  .cart-icon {
    color: #3a3a3a;
    margin-right: 12px;
  }
  
  .selected-options-header h2 {
    font-size: 1.3rem;
    font-weight: 600;
    margin: 0;
    color: #333;
  }
  
  .selected-levels {
    margin-bottom: 20px;
  }
  
  .level-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px 0;
    border-bottom: 1px solid #f0f0f0;
  }
  
  .level-item span {
    font-size: 1.05rem;
    color: #333;
    font-weight: 500;
  }
  
  .remove-button {
    background: none;
    border: none;
    cursor: pointer;
    color: #e74c3c;
    padding: 5px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.2s;
  }
  
  .remove-button:hover {
    background-color: rgba(231, 76, 60, 0.1);
  }
  
  .remove-button svg {
    color: #e74c3c;
  }
  
  .options-divider {
    height: 1px;
    background-color: #e8e8e8;
    margin: 20px 0;
  }
  
  .selected-colors-header {
    display: flex;
    align-items: center;
    margin-bottom: 18px;
  }
  
  .palette-icon {
    color: #3a3a3a;
    margin-right: 12px;
  }
  
  .selected-colors-header h3 {
    font-size: 1.2rem;
    font-weight: 600;
    margin: 0;
    color: #333;
  }
  
  .selected-colors-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 16px;
    margin-bottom: 24px;
  }
  
  .color-item {
    display: flex;
    align-items: center;
  }
  
  .color-swatch {
    width: 28px;
    height: 28px;
    border-radius: 50%;
    margin-right: 12px;
    border: 1px solid #e0e0e0;
  }
  
  .color-name {
    font-size: 0.95rem;
    color: #333;
    font-weight: 500;
  }
  
  .checkout-button-container {
    display: flex;
    justify-content: center;
    margin-top: 20px;
  }
  
  .checkout-button {
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    padding: 12px 22px;
    font-size: 1.1rem;
    font-weight: 500;
    cursor: pointer;
    width: 100%;
    transition: background-color 0.2s;
  }
  
  .checkout-button:hover {
    background-color: #45a049;
  }
  
  .checkout-icon {
    margin-right: 10px;
  }
  
  .color-selection-notice {
    font-size: 0.85rem;
    color: #666;
    text-align: center;
    margin-top: 10px;
    font-style: italic;
  }
  
  @media (max-width: 600px) {
    .selected-colors-grid {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // This script will be initialized from vectary-embed.liquid
    window.initSelectedOptionsDisplay = function(products, colorSwatchesData, appState) {
      // Populate selected levels
      const selectedLevelsContainer = document.getElementById('selected-levels-container');
      if (selectedLevelsContainer) {
        selectedLevelsContainer.innerHTML = '';
        
        // Add all products to the display
        products.forEach(product => {
          const levelItem = document.createElement('div');
          levelItem.className = 'level-item';
          levelItem.setAttribute('data-level', product.level);
          
          const levelName = document.createElement('span');
          levelName.textContent = product.name;
          
          const removeButton = document.createElement('button');
          removeButton.className = 'remove-button';
          removeButton.setAttribute('data-level', product.level);
          removeButton.setAttribute('aria-label', `Remove ${product.name}`);
          removeButton.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <circle cx="12" cy="12" r="10"></circle>
              <line x1="15" y1="9" x2="9" y2="15"></line>
              <line x1="9" y1="9" x2="15" y2="15"></line>
            </svg>
          `;
          
          // Add click handler for remove button
          removeButton.addEventListener('click', function() {
            const level = this.getAttribute('data-level');
            const levelEvent = new CustomEvent('selected-options-remove-level', {
              detail: { level: parseInt(level) }
            });
            document.dispatchEvent(levelEvent);
            
            // Toggle visibility instead of hiding
            if (levelItem.classList.contains('inactive')) {
              levelItem.classList.remove('inactive');
              levelItem.classList.add('active');
              this.textContent = 'Remove';
            } else {
              levelItem.classList.remove('active');
              levelItem.classList.add('inactive');
              this.textContent = 'Reactivate';
            }
          });
          
          levelItem.appendChild(levelName);
          levelItem.appendChild(removeButton);
          selectedLevelsContainer.appendChild(levelItem);
        });
      }
    };
  });
</script>